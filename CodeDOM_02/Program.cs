using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.CodeDom;
using Microsoft.CSharp;
using System.CodeDom.Compiler;
using System.IO;


namespace CodeDOM_02
{
    class Program
    {
        static void Main(string[] args)
        {
            var unit = new CodeCompileUnit();
            var dynamicNamespace = new CodeNamespace("PhilsAutogeneratedCode");
            unit.Namespaces.Add(dynamicNamespace);

            dynamicNamespace.Imports.Add(new CodeNamespaceImport("System"));
            var programType = new CodeTypeDeclaration("Program");
            dynamicNamespace.Types.Add(programType);
            var mainMethod = new CodeEntryPointMethod();
            programType.Members.Add(mainMethod);

            var prop = new CodePropertyReferenceExpression(new CodeTypeReferenceExpression("System.DateTime"), "Now");
            var expression = new CodeMethodInvokeExpression(new CodeTypeReferenceExpression("Console"), "WriteLine", new CodePrimitiveExpression("The time is {0}"), prop);
            mainMethod.Statements.Add(expression);


            expression = new CodeMethodInvokeExpression(new CodeTypeReferenceExpression("Console"), "ReadLine");
            mainMethod.Statements.Add(expression);

            var csProvider = new CSharpCodeProvider();
            var csFileName = "program.cs";
            var options = new CodeGeneratorOptions();
          //  options.BlankLinesBetweenMembers = true;
            using (var stream = new StreamWriter(csFileName))
            {
                using (var textWriter = new IndentedTextWriter(stream))
                {
                    csProvider.GenerateCodeFromCompileUnit(unit, textWriter, options);
                }
            }

            var compilerSettings = new CompilerParameters();
            compilerSettings.ReferencedAssemblies.Add("System.dll");
            compilerSettings.GenerateExecutable = true;
            compilerSettings.OutputAssembly = "CodeDOM_02_output.exe";

            var compilationResults = csProvider.CompileAssemblyFromFile(compilerSettings, csFileName);
            foreach(var error in compilationResults.Errors)
            {
                var errorMessage = error.ToString();
                
            }

            Console.WriteLine("The system has generated an exe file.");
            Console.WriteLine("After 3 seconds it is going to execute");

            System.Threading.Thread.Sleep(3000);

  

            System.Diagnostics.Process.Start(@"CodeDOM_02_output.exe");


        }
    }
}
