using System;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace API_2019_09_08_Generate_API_code
{
    class Program
    {
        static Welcome[] welcomes;
        static void Main(string[] args)
        {
            Console.WriteLine("\n\nGetting Data\n");
            GetJsonData();


            Console.WriteLine("\n\nGetting Data Asynchronously\n");
            var output = GetJsonDataAsync();
            welcomes = Welcome.FromJson(output.Result);
            Console.WriteLine(welcomes.ToJson());
            Array.ForEach(welcomes, w => Console.WriteLine(w.Address));

            
        }

        static async Task<string> GetJsonDataAsync()
        {

            using (var client = new HttpClient())
            {
                var url = "https://raw.githubusercontent.com/philanderson888/data/master/customers2.json";
                var content = await client.GetStringAsync(url);
                //Console.WriteLine(content);
                return content;
            }
        }

        static async void GetJsonData()
        {
            using (var client = new HttpClient())
            {
                var url = "https://raw.githubusercontent.com/philanderson888/data/master/customers2.json";
                var content = await client.GetStringAsync(url);
                Console.WriteLine(content);
                welcomes = Welcome.FromJson(content);
                Console.WriteLine("\n\nPrinting Array To JSON\n");
                Console.WriteLine(welcomes.ToJson());
                Console.WriteLine("\n\nPrinting Individual Fields\n");
                Array.ForEach(welcomes, w => Console.WriteLine(w.Address));
            }
        }
    }

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);


    public partial class Welcome
    {
        [JsonProperty("index")]
        public long Index { get; set; }

        [JsonProperty("isActive")]
        public bool IsActive { get; set; }

        [JsonProperty("picture")]
        public Uri Picture { get; set; }

        [JsonProperty("age")]
        public long Age { get; set; }

        [JsonProperty("name")]
        public Name Name { get; set; }

        [JsonProperty("company")]
        public string Company { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("phone")]
        public string Phone { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }
    }

    public partial class Name
    {
        [JsonProperty("first")]
        public string First { get; set; }

        [JsonProperty("last")]
        public string Last { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome[] FromJson(string json) => JsonConvert.DeserializeObject<Welcome[]>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome[] self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

